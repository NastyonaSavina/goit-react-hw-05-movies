{"version":3,"file":"static/js/874.f730cbc0.chunk.js","mappings":"oPAGaA,EAAYC,EAAAA,GAAAA,GAAH,wDAKTC,EAAUD,EAAAA,GAAAA,IAAF,0CAIRE,EAAKF,EAAAA,GAAAA,EAAD,+FAOJG,EAAMH,EAAAA,GAAAA,GAAF,8C,SCLF,SAASI,IAEpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OAPAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAaN,GAASO,MAAM,gBAAEC,EAAF,EAAEA,KAAF,OAC5BJ,EAAaI,EADe,GAG/B,GAAE,CAACR,KAIA,+BACI,SAACF,EAAD,UACKK,GAAaA,EAAUM,KAAI,SAAAD,GAAI,MAAI,EAChC,UAACd,EAAD,WACKc,EAAKE,cACA,SAACd,EAAD,CAAUe,IAAKH,EAAKI,cAAeC,IAAG,6CAAwCL,EAAKE,iBACnF,SAACb,EAAD,wBACN,UAACA,EAAD,qBAAcW,EAAKI,kBACnB,UAACf,EAAD,yBAAkBW,EAAKM,eALXN,EAAKO,IADO,OAkB3C,C,qLC/CCC,EAAU,mCAEVC,EAAW,gCAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,CAAC,EAA/C,SAC2BC,MAAMF,EAAKC,GADtC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,2GAQO,SAASC,IACd,OAAOV,EAAY,GAAD,OAAID,EAAJ,sCAA0CD,GAC7D,CAGM,SAASa,EAAsB7B,GACpC,OAAOkB,EAAY,GAAD,OAAID,EAAJ,kBAAsBjB,EAAtB,oBAAyCgB,EAAzC,mBAGnB,CAEM,SAASV,EAAaN,GAC3B,OAAOkB,EAAY,GAAD,OAAID,EAAJ,kBAAsBjB,EAAtB,4BAAiDgB,EAAjD,mBACnB,CAEM,SAASc,EAAgB9B,GAC9B,OAAOkB,EAAY,GAAD,OAAID,EAAJ,kBAAsBjB,EAAtB,4BAAiDgB,EAAjD,0BACnB,CAGM,SAASe,EAAgBC,GAE5B,OAAOd,EAAY,GAAD,OAAID,EAAJ,iCAAqCD,EAArC,4DAAgGgB,GAGrH,C,sBCtCD,SAASC,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAhB,EAAOgB,EAET,CAEIF,EAAKG,KACPR,EAAQM,GAERhB,QAAQU,QAAQM,GAAOlC,KAAK6B,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIxB,SAAQ,SAAUU,EAAST,GACpC,IAAIQ,EAAMW,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbR,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdlB,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["pages/SingleMoviePage/CastPage/CastPage.styled.jsx","pages/SingleMoviePage/CastPage/CastPage.jsx","servises/FetchMovies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const ActorItem = styled.li`\nheight: 200px;\npadding: 10px;\n`\n\nexport const ActorImg= styled.img`\n    width: 80px;\n`\n\nexport const Text=styled.p`\n    font-weight: 300;\n    font-size: 15px;\n    line-height: 1.67;\n\n`\n\nexport const List= styled.ul`\nmargin-left: 20px;\n\n`","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from \"react\";\n\nimport { getCastMovie } from '../../../servises/FetchMovies';\n\nimport {\n    ActorItem,\n    ActorImg,\n    Text,\n    List\n}\n    from './CastPage.styled';\n\n\nexport default function CastPage() {\n\n    const { movieId } = useParams();\n    const [castMovie, setCastMovie] = useState(null);\n\n\n    useEffect(() => {\n        getCastMovie(movieId).then( ({cast} ) => \n        setCastMovie(cast)\n        );\n    }, [movieId]);\n\n  \n    return (\n        <>\n            <List>\n                {castMovie && castMovie.map(cast => [\n                    <ActorItem key={cast.id}>\n                        {cast.profile_path\n                            ? <ActorImg alt={cast.original_name} src={`https://image.tmdb.org/t/p/original${cast.profile_path}`} />\n                            : <Text>No image</Text>}\n                        <Text>Actor: {cast.original_name}</Text>\n                        <Text>Character: {cast.character}</Text>\n\n\n                    </ActorItem>\n                ])}\n                \n            </List>\n            \n            \n        </>\n        \n        )\n    }","\nconst API_KEY = \"10612ebbbeaf2ad5999e09badf85e183\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nasync function fetchMovies(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\n\nexport function getMovieTrending() {\n  return fetchMovies(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n}\n\n\nexport function getSingleMovieDetails(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n\n  \n}\n\nexport function getCastMovie(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n}\n\nexport function getMovieReviews(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n}\n\n\nexport function getMovieByQuery(query) {\n  \n    return fetchMovies(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`)\n\n  \n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["ActorItem","styled","ActorImg","Text","List","CastPage","movieId","useParams","useState","castMovie","setCastMovie","useEffect","getCastMovie","then","cast","map","profile_path","alt","original_name","src","character","id","API_KEY","BASE_URL","fetchMovies","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieTrending","getSingleMovieDetails","getMovieReviews","getMovieByQuery","query","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}